"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qs";
exports.ids = ["vendor-chunks/qs"];
exports.modules = {

/***/ "(rsc)/./node_modules/qs/lib/formats.js":
/*!****************************************!*\
  !*** ./node_modules/qs/lib/formats.js ***!
  \****************************************/
/***/ ((module) => {

eval("\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\nvar Format = {\n    RFC1738: \"RFC1738\",\n    RFC3986: \"RFC3986\"\n};\nmodule.exports = {\n    \"default\": Format.RFC3986,\n    formatters: {\n        RFC1738: function(value) {\n            return replace.call(value, percentTwenties, \"+\");\n        },\n        RFC3986: function(value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxPQUFPQyxTQUFTLENBQUNGLE9BQU87QUFDdEMsSUFBSUcsa0JBQWtCO0FBRXRCLElBQUlDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxTQUFTO0FBQ2I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2IsV0FBV0osT0FBT0UsT0FBTztJQUN6QkcsWUFBWTtRQUNSSixTQUFTLFNBQVVLLEtBQUs7WUFDcEIsT0FBT1YsUUFBUVcsSUFBSSxDQUFDRCxPQUFPUCxpQkFBaUI7UUFDaEQ7UUFDQUcsU0FBUyxTQUFVSSxLQUFLO1lBQ3BCLE9BQU9ULE9BQU9TO1FBQ2xCO0lBQ0o7SUFDQUwsU0FBU0QsT0FBT0MsT0FBTztJQUN2QkMsU0FBU0YsT0FBT0UsT0FBTztBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcz82MTY2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG52YXIgRm9ybWF0ID0ge1xuICAgIFJGQzE3Mzg6ICdSRkMxNzM4JyxcbiAgICBSRkMzOTg2OiAnUkZDMzk4Nidcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdkZWZhdWx0JzogRm9ybWF0LlJGQzM5ODYsXG4gICAgZm9ybWF0dGVyczoge1xuICAgICAgICBSRkMxNzM4OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlLmNhbGwodmFsdWUsIHBlcmNlbnRUd2VudGllcywgJysnKTtcbiAgICAgICAgfSxcbiAgICAgICAgUkZDMzk4NjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgUkZDMTczODogRm9ybWF0LlJGQzE3MzgsXG4gICAgUkZDMzk4NjogRm9ybWF0LlJGQzM5ODZcbn07XG4iXSwibmFtZXMiOlsicmVwbGFjZSIsIlN0cmluZyIsInByb3RvdHlwZSIsInBlcmNlbnRUd2VudGllcyIsIkZvcm1hdCIsIlJGQzE3MzgiLCJSRkMzOTg2IiwibW9kdWxlIiwiZXhwb3J0cyIsImZvcm1hdHRlcnMiLCJ2YWx1ZSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs/lib/formats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs/lib/index.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar stringify = __webpack_require__(/*! ./stringify */ \"(rsc)/./node_modules/qs/lib/stringify.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"(rsc)/./node_modules/qs/lib/parse.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(rsc)/./node_modules/qs/lib/formats.js\");\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUUsVUFBVUYsbUJBQU9BLENBQUM7QUFFdEJHLE9BQU9DLE9BQU8sR0FBRztJQUNiRixTQUFTQTtJQUNURCxPQUFPQTtJQUNQRixXQUFXQTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcz9iNjk5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiJdLCJuYW1lcyI6WyJzdHJpbmdpZnkiLCJyZXF1aXJlIiwicGFyc2UiLCJmb3JtYXRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs/lib/parse.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/parse.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/qs/lib/utils.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: \"&\",\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\nvar interpretNumericEntities = function(str) {\n    return str.replace(/&#(\\d+);/g, function($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\nvar parseArrayValue = function(val, options) {\n    if (val && typeof val === \"string\" && options.comma && val.indexOf(\",\") > -1) {\n        return val.split(\",\");\n    }\n    return val;\n};\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = \"utf8=%26%2310003%3B\"; // encodeURIComponent('&#10003;')\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = \"utf8=%E2%9C%93\"; // encodeURIComponent('✓')\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {\n        __proto__: null\n    };\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, \"\") : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for(i = 0; i < parts.length; ++i){\n            if (parts[i].indexOf(\"utf8=\") === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = \"utf-8\";\n                } else if (parts[i] === isoSentinel) {\n                    charset = \"iso-8859-1\";\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n    for(i = 0; i < parts.length; ++i){\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n        var bracketEqualsPos = part.indexOf(\"]=\");\n        var pos = bracketEqualsPos === -1 ? part.indexOf(\"=\") : bracketEqualsPos + 1;\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, \"key\");\n            val = options.strictNullHandling ? null : \"\";\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, \"key\");\n            val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {\n                return options.decoder(encodedVal, defaults.decoder, charset, \"value\");\n            });\n        }\n        if (val && options.interpretNumericEntities && charset === \"iso-8859-1\") {\n            val = interpretNumericEntities(val);\n        }\n        if (part.indexOf(\"[]=\") > -1) {\n            val = isArray(val) ? [\n                val\n            ] : val;\n        }\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n    return obj;\n};\nvar parseObject = function(chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n    for(var i = chain.length - 1; i >= 0; --i){\n        var obj;\n        var root = chain[i];\n        if (root === \"[]\" && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === \"[\" && root.charAt(root.length - 1) === \"]\" ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === \"\") {\n                obj = {\n                    0: leaf\n                };\n            } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== \"__proto__\") {\n                obj[cleanRoot] = leaf;\n            }\n        }\n        leaf = obj;\n    }\n    return leaf;\n};\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, \"[$1]\") : givenKey;\n    // The regex chunks\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n    // Get the parent\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n    // Stash the parent if it exists\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(parent);\n    }\n    // Loop through children appending to the array until we hit depth\n    var i = 0;\n    while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n    // If there's a remainder, just add whatever is left\n    if (segment) {\n        keys.push(\"[\" + key.slice(segment.index) + \"]\");\n    }\n    return parseObject(keys, val, options, valuesParsed);\n};\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== \"function\") {\n        throw new TypeError(\"Decoder has to be a function.\");\n    }\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    var charset = typeof opts.charset === \"undefined\" ? defaults.charset : opts.charset;\n    return {\n        allowDots: typeof opts.allowDots === \"undefined\" ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === \"boolean\" ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === \"boolean\" ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === \"number\" ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === \"boolean\" ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === \"function\" ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === \"string\" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: typeof opts.depth === \"number\" || opts.depth === false ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === \"boolean\" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === \"number\" ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === \"boolean\" ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\nmodule.exports = function(str, opts) {\n    var options = normalizeParseOptions(opts);\n    if (str === \"\" || str === null || typeof str === \"undefined\") {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n    var tempObj = typeof str === \"string\" ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n    // Iterate over the keys and setup the new object\n    var keys = Object.keys(tempObj);\n    for(var i = 0; i < keys.length; ++i){\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === \"string\");\n        obj = utils.merge(obj, newObj, options);\n    }\n    if (options.allowSparse === true) {\n        return obj;\n    }\n    return utils.compact(obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs/lib/stringify.js":
/*!******************************************!*\
  !*** ./node_modules/qs/lib/stringify.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar getSideChannel = __webpack_require__(/*! side-channel */ \"(rsc)/./node_modules/side-channel/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/qs/lib/utils.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(rsc)/./node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + \"[]\";\n    },\n    comma: \"comma\",\n    indices: function indices(prefix, key) {\n        return prefix + \"[\" + key + \"]\";\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function(arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [\n        valueOrArray\n    ]);\n};\nvar toISO = Date.prototype.toISOString;\nvar defaultFormat = formats[\"default\"];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    delimiter: \"&\",\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" || typeof v === \"symbol\" || typeof v === \"bigint\";\n};\nvar sentinel = {};\nvar stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    var obj = object;\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag){\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== \"undefined\") {\n            if (pos === step) {\n                throw new RangeError(\"Cyclic object value\");\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === \"undefined\") {\n            step = 0;\n        }\n    }\n    if (typeof filter === \"function\") {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === \"comma\" && isArray(obj)) {\n        obj = utils.maybeMap(obj, function(value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, \"key\", format) : prefix;\n        }\n        obj = \"\";\n    }\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, \"key\", format);\n            return [\n                formatter(keyValue) + \"=\" + formatter(encoder(obj, defaults.encoder, charset, \"value\", format))\n            ];\n        }\n        return [\n            formatter(prefix) + \"=\" + formatter(String(obj))\n        ];\n    }\n    var values = [];\n    if (typeof obj === \"undefined\") {\n        return values;\n    }\n    var objKeys;\n    if (generateArrayPrefix === \"comma\" && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [\n            {\n                value: obj.length > 0 ? obj.join(\",\") || null : void undefined\n            }\n        ];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + \"[]\" : prefix;\n    for(var j = 0; j < objKeys.length; ++j){\n        var key = objKeys[j];\n        var value = typeof key === \"object\" && typeof key.value !== \"undefined\" ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === \"function\" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? \".\" + key : \"[\" + key + \"]\");\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, generateArrayPrefix === \"comma\" && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n};\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== \"undefined\" && typeof opts.encoder !== \"function\") {\n        throw new TypeError(\"Encoder has to be a function.\");\n    }\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    var format = formats[\"default\"];\n    if (typeof opts.format !== \"undefined\") {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError(\"Unknown format option provided.\");\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n    var filter = defaults.filter;\n    if (typeof opts.filter === \"function\" || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === \"boolean\" ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === \"undefined\" ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === \"undefined\" ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === \"boolean\" ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === \"function\" ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === \"boolean\" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === \"function\" ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === \"boolean\" ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === \"function\" ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\nmodule.exports = function(object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n    var objKeys;\n    var filter;\n    if (typeof options.filter === \"function\") {\n        filter = options.filter;\n        obj = filter(\"\", obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n    var keys = [];\n    if (typeof obj !== \"object\" || obj === null) {\n        return \"\";\n    }\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && \"indices\" in opts) {\n        arrayFormat = opts.indices ? \"indices\" : \"repeat\";\n    } else {\n        arrayFormat = \"indices\";\n    }\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n    if (opts && \"commaRoundTrip\" in opts && typeof opts.commaRoundTrip !== \"boolean\") {\n        throw new TypeError(\"`commaRoundTrip` must be a boolean, or absent\");\n    }\n    var commaRoundTrip = generateArrayPrefix === \"comma\" && opts && opts.commaRoundTrip;\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n    var sideChannel = getSideChannel();\n    for(var i = 0; i < objKeys.length; ++i){\n        var key = objKeys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? \"?\" : \"\";\n    if (options.charsetSentinel) {\n        if (options.charset === \"iso-8859-1\") {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += \"utf8=%26%2310003%3B&\";\n        } else {\n            // encodeURIComponent('✓')\n            prefix += \"utf8=%E2%9C%93&\";\n        }\n    }\n    return joined.length > 0 ? prefix + joined : \"\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs/lib/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs/lib/utils.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/utils.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar formats = __webpack_require__(/*! ./formats */ \"(rsc)/./node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar hexTable = function() {\n    var array = [];\n    for(var i = 0; i < 256; ++i){\n        array.push(\"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase());\n    }\n    return array;\n}();\nvar compactQueue = function compactQueue(queue) {\n    while(queue.length > 1){\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n        if (isArray(obj)) {\n            var compacted = [];\n            for(var j = 0; j < obj.length; ++j){\n                if (typeof obj[j] !== \"undefined\") {\n                    compacted.push(obj[j]);\n                }\n            }\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for(var i = 0; i < source.length; ++i){\n        if (typeof source[i] !== \"undefined\") {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n};\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */ if (!source) {\n        return target;\n    }\n    if (typeof source !== \"object\") {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === \"object\") {\n            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [\n                target,\n                source\n            ];\n        }\n        return target;\n    }\n    if (!target || typeof target !== \"object\") {\n        return [\n            target\n        ].concat(source);\n    }\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function(item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === \"object\" && item && typeof item === \"object\") {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function(acc, key) {\n        var value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function(acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\nvar decode = function(str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, \" \");\n    if (charset === \"iso-8859-1\") {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    var string = str;\n    if (typeof str === \"symbol\") {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== \"string\") {\n        string = String(str);\n    }\n    if (charset === \"iso-8859-1\") {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {\n            return \"%26%23\" + parseInt($0.slice(2), 16) + \"%3B\";\n        });\n    }\n    var out = \"\";\n    for(var i = 0; i < string.length; ++i){\n        var c = string.charCodeAt(i);\n        if (c === 0x2D // -\n         || c === 0x2E // .\n         || c === 0x5F // _\n         || c === 0x7E // ~\n         || c >= 0x30 && c <= 0x39 // 0-9\n         || c >= 0x41 && c <= 0x5A // a-z\n         || c >= 0x61 && c <= 0x7A // A-Z\n         || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);\n            continue;\n        }\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);\n            continue;\n        }\n        i += 1;\n        c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);\n        /* eslint operator-linebreak: [2, \"before\"] */ out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n    }\n    return out;\n};\nvar compact = function compact(value) {\n    var queue = [\n        {\n            obj: {\n                o: value\n            },\n            prop: \"o\"\n        }\n    ];\n    var refs = [];\n    for(var i = 0; i < queue.length; ++i){\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n        var keys = Object.keys(obj);\n        for(var j = 0; j < keys.length; ++j){\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === \"object\" && val !== null && refs.indexOf(val) === -1) {\n                queue.push({\n                    obj: obj,\n                    prop: key\n                });\n                refs.push(val);\n            }\n        }\n    }\n    compactQueue(queue);\n    return value;\n};\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n};\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for(var i = 0; i < val.length; i += 1){\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs/lib/utils.js\n");

/***/ })

};
;